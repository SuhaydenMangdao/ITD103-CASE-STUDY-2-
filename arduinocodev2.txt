#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <time.h>

// Replace with your network credentials
const char* ssid = "GLOBEWIFI";
const char* password = "helloworld";

// Replace with your local server IP and port
const char* serverIP = "http://192.168.254.111:3001";

const int entrancePin = 2; // GPIO 2 (D4)
const int exitPin = 3; // GPIO 3 (D9)

WiFiClient wifiClient;

void setup() {
  Serial.begin(115200);
  pinMode(entrancePin, INPUT);
  pinMode(exitPin, INPUT);

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // Initialize time
  configTime(28800, 0, "pool.ntp.org", "time.nist.gov"); // GMT+8 for Philippines
  while (!time(nullptr)) {
    Serial.print(".");
    delay(1000);
  }
  Serial.println("Time synchronized");
}

unsigned long previousMillis = 0; // Stores the last time the data was sent
const long interval = 5000;       // Interval at which to send data (milliseconds)
void loop() {
  unsigned long currentMillis = millis();

  int entranceStatus = digitalRead(entrancePin);
  int exitStatus = digitalRead(exitPin);
  String datetime = getTime();

  if (currentMillis - previousMillis >= interval) {
    // Save the last time the data was sent
    previousMillis = currentMillis;

    if (WiFi.status() == WL_CONNECTED) {
      HTTPClient http;

      // Construct URL for entrance data
      String entranceUrl = String(serverIP) + "/addEntranceData?count=" + String(entranceStatus) + "&time=" + datetime;
      http.begin(wifiClient, entranceUrl);
      int entranceResponseCode = http.GET();
      if (entranceResponseCode > 0) {
        String response = http.getString();
        Serial.println(entranceResponseCode);
        Serial.println(response);
      } else {
        Serial.print("Error on entrance GET: ");
        Serial.println(entranceResponseCode);
        Serial.println(http.errorToString(entranceResponseCode).c_str());
      }
      http.end();

      // Construct URL for exit data
      String exitUrl = String(serverIP) + "/addExitData?count=" + String(exitStatus) + "&time=" + datetime;
      http.begin(wifiClient, exitUrl);
      int exitResponseCode = http.GET();
      if (exitResponseCode > 0) {
        String response = http.getString();
        Serial.println(exitResponseCode);
        Serial.println(response);
      } else {
        Serial.print("Error on exit GET: ");
        Serial.println(exitResponseCode);
        Serial.println(http.errorToString(exitResponseCode).c_str());
      }
      http.end();
    } else {
      Serial.println("Error in WiFi connection");
    }
  }
}


String getTime() {
  time_t now;
  struct tm timeinfo;
  char timeString[20]; // Buffer to hold formatted time

  // Get current time
  time(&now);
  localtime_r(&now, &timeinfo);

  // Format time as MM/DD/YY/HH:MM:SS
  snprintf(timeString, sizeof(timeString), "%02d/%02d/%02d/%02d:%02d:%02d",
           timeinfo.tm_mon + 1, timeinfo.tm_mday, timeinfo.tm_year % 100,
           timeinfo.tm_hour, timeinfo.tm_min, timeinfo.tm_sec);

  return String(timeString);
}
