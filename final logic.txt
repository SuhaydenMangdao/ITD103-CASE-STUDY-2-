// Define the pins for the PIR sensors
const int pirMotionPin = D2;
const int pirExitPin = D3;

// Variables to store the PIR sensor states
int pirMotionState = LOW;
int pirExitState = LOW;

// Counter for the motion detections
int motionCounter = 0;

// Maximum number of allowed entrances
const int maxEntrances = 6;

// Flag to indicate sleep state
bool isAsleep = false;

// Function to print the current status
void printStatus(const char* event) {
  int entrancesAvailable = max(maxEntrances - motionCounter, 0);
  int exitsAvailable = min(motionCounter, maxEntrances); // Limit exits available to maxEntrances

  // If asleep and exits available, update entrances available based on exits
  if (isAsleep && exitsAvailable > 0) {
    entrancesAvailable = max(maxEntrances - exitsAvailable, 0);
  }

  // Print status only if entrances are available
  if (entrancesAvailable > 0) {
    // Serial.print(event); // Removed this line to remove the prefix
    Serial.print("Parking available: ");
    Serial.println(entrancesAvailable);
    Serial.print("Exits available: ");
    Serial.println(exitsAvailable);
  }
}



void setup() {
  // Initialize serial communication for debugging
  Serial.begin(115200);

  // Set the PIR sensor pins as inputs
  pinMode(pirMotionPin, INPUT);
  pinMode(pirExitPin, INPUT);

  // Print initial status
  printStatus("Initial status");
}

void loop() {
  // Read the PIR sensor states
  int newPirMotionState = digitalRead(pirMotionPin);
  int newPirExitState = digitalRead(pirExitPin);

  // Check if motion is detected by the motion sensor
  if (!isAsleep && newPirMotionState == HIGH) {
    Serial.println("Motion detected on entrance!");
    motionCounter++;

    // Print status after detection
    printStatus("Motion detected on entrance");

    // Add a 2-second delay
    delay(2000);

    // Check if the motion counter has reached the limit
    if (motionCounter >= maxEntrances) {
      isAsleep = true;
      Serial.println("Maximum entrance limit reached, waiting for exit...");
    }
  }

  // If asleep and no exits detected, check if motion is detected by the exit sensor
  if (isAsleep && newPirExitState == HIGH) {
    if (motionCounter > 0) { // Only proceed if there are entrances available
      Serial.println("Exit detected!");
      motionCounter--; // Decrement the motion counter

      // Add a 2-second delay
      delay(2000);

      // Print status after exit detection
      printStatus("Exit detected");
    }
  }

  // Small delay to avoid bouncing
  delay(50);

  // Check if parking availability is greater than 0 before activating scanning for D2
  if (!isAsleep && (maxEntrances - motionCounter > 0)) {
    digitalWrite(pirMotionPin, HIGH); // Activate scanning
  } else {
    // Otherwise, D2 will not scan anything
    digitalWrite(pirMotionPin, LOW);
  }

  // If awake, check for motion on exit sensor
  if (!isAsleep) {
    if (newPirExitState == HIGH) {
      if (motionCounter > 0) { // Only proceed if there are entrances available
        Serial.println("Exit detected!");
        motionCounter--; // Decrement the motion counter

        // Print status after exit detection
        printStatus("Exit detected");

        // Add a 2-second delay
        delay(2000);
      }
    }
  }
}









